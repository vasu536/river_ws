#define M_PI           3.14159265358979323846  /* pi */

#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <math.h>
#include <iostream>
#include <exception>

#include "ros/ros.h"

using namespace std;

class PositionCalculatorNode {

private:
    ros::NodeHandle nh_;
    ros::NodeHandle pnh_;
    ros::Rate loop_rate_;
    std::string frame_id_;

    std::sensor_msgs::Imu latest_imu_msg;
    bool imu_msg_received;


public:

    PositionCalculatorNode()
    {
        imu_msg_received = false;
    }

    PositionCalculatorNode(ros::NodeHandle nh, ros::NodeHandle pnh)
    : nh_(nh), pnh_(pnh), loop_rate_(100)
    {
        imu_sub = nh.subscribe("imu/data", 10, &PositionCalculatorNode::imu_callback, this);
    }

    void imu_callback(const sensor_msgs::ImuConstPtr& msg)
    {
        latest_imu_msg = *msg;
        imu_msg_received = true;
        std::cout << "Data received" << std::endl;
    }

    void spin()
    {
        while (ros::ok())
        {
            if (imu_msg_received)
            {
                imu_msg_received = false;
            }

            ros::spinOnce();
            loop_rate_.sleep();
        }
    }

protected:

    ros::Subscriber imu_sub;

};

int main(int argc, char *argv[]) {
    ros::init(argc, argv, "position_calculator_node");
    ros::NodeHandle nh;
    ros::NodeHandle pnh("~");

    try {
        PositionCalculatorNode node(nh, pnh);

        //node.setZero();
        node.spin();
    } catch(std::exception& e){
        ROS_FATAL_STREAM("Exception thrown: " << e.what());
    }

    return 0;

}
